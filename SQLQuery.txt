import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

public class InsertQueryGenerator {

    public static void main(String[] args) {
        // Input JSON (First one)
        String inputJson = """
        {
          "DeliveryContent": {
            "contentType": {
               "type": "String",
               "mandatory": true
            },
            "alertText": {
               "type": "String",
               "mandatory": true
            },
            "messageTypeId": {
               "type": "String",
               "mandatory": false
            }
          },
          "DeliveryMetadata": {
            "uowId": {
               "type": "String",
               "mandatory": true
            },
            "sorUowId": {
               "type": "String",
               "mandatory": true
            },
            "inboundUowId": {
               "type": "String",
               "mandatory": true
            }
          }
        }
        """;

        // DB relation JSON (Second one)
        String dbRelationJson = """
        {
          "sorUowId": {
            "dbName": "SOR_UOWID",
            "dbType": "String"
          },
          "uowId": {
            "dbName": "UOW_ID",
            "dbType": "String"
          },
          "inboundUowId": {
            "dbName": "INBOUND_UOW_ID",
            "dbType": "String"
          },
          "contentType": {
            "dbName": "CONTENT_TYPE",
            "dbType": "String"
          },
          "alertText": {
            "dbName": "ALERT_TEXT",
            "dbType": "Bytes"
          },
          "messageTypeId": {
            "dbName": "MESSAGE_TYPE_ID",
            "dbType": "Int"
          }
        }
        """;

        try {
            generateInsertQueryAndPreparedStatement(inputJson, dbRelationJson);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void generateInsertQueryAndPreparedStatement(String inputJson, String dbRelationJson) throws Exception {
        ObjectMapper mapper = new ObjectMapper();

        // Parse the JSON input and DB relation
        JsonNode inputNode = mapper.readTree(inputJson);
        JsonNode dbRelationNode = mapper.readTree(dbRelationJson);

        // LinkedHashMap to maintain insertion order for DB columns
        Map<String, String> columnMap = new LinkedHashMap<>();
        StringBuilder preparedStatementScript = new StringBuilder();

        // Build the column map and prepared statement map
        dbRelationNode.fields().forEachRemaining(dbField -> {
            String fieldName = dbField.getKey();
            JsonNode dbFieldProperties = dbField.getValue();
            String columnName = dbFieldProperties.get("dbName").asText();
            String dbType = dbFieldProperties.get("dbType").asText();

            // Generate the column map entry
            columnMap.put(columnName, "?" /* Placeholder for prepared statement */);

            // Generate the prepared statement logic
            String getterMethod = "get" + capitalize(fieldName);
            int index = columnMap.size(); // Keep track of the parameter index

            // Handle Bytes type differently with compression logic
            if ("bytes".equalsIgnoreCase(dbType)) {
                preparedStatementScript.append(String.format("byte[] compressedValue = getCompressedValue(deliveryContentAudit.get%s());\n", getterMethod))
                        .append(String.format("if (Objects.nonNull(compressedValue)) {\n    ps.setBytes(Constants.%d, compressedValue);\n", index))
                        .append(String.format("} else {\n    ps.setNull(Constants.%d, Types.BLOB);\n}\n", index));
            } else {
                // Use DAOUtil for other types
                String setterMethod = determineDaoUtilMethod(dbType);
                preparedStatementScript.append(String.format("DAOUtil.%s(ps, Constants.%d, deliveryContentAudit.get%s());\n", setterMethod, index, getterMethod));
            }
        });

        // Add the CREATOR_ID field at the end
        columnMap.put("CREATOR_ID", "?");
        int creatorIndex = columnMap.size();

        // Add CREATOR_ID to the prepared statement script
        preparedStatementScript.append(String.format("DAOUtil.setString(ps, Constants.%d, Constants.CREATOR_ID);\n", creatorIndex));

        // Generate the INSERT query
        String columns = String.join(", ", columnMap.keySet());
        String values = String.join(", ", columnMap.values());
        String insertQuery = "INSERT INTO T_DELIVER_CONTENT (" + columns + ") VALUES (" + values + ");";

        // Output the results
        System.out.println("Generated INSERT Query:");
        System.out.println(insertQuery);
        System.out.println("\nGenerated PreparedStatement Script:");
        System.out.println(preparedStatementScript.toString());
    }

    // Utility method to capitalize the first letter
    public static String capitalize(String str) {
        if (str == null || str.isEmpty()) {
            return str;
        }
        return str.substring(0, 1).toUpperCase() + str.substring(1);
    }

    // Determine the appropriate DAOUtil method
    public static String determineDaoUtilMethod(String dbType) {
        switch (dbType.toLowerCase()) {
            case "int":
                return "setInt";
            case "string":
                return "setString";
            case "bytes":
                return "setBytes";
            default:
                throw new IllegalArgumentException("Unsupported DB type: " + dbType);
        }
    }

    // Sample method to demonstrate compression logic
    public static byte[] getCompressedValue(String input) {
        // Replace with actual compression logic
        if (input == null) {
            return null;
        }
        return input.getBytes(); // Simulating compression
    }
	
	public static String buildGetterMethod(JsonNode inputNode, String fieldName) {
    StringBuilder getterChain = new StringBuilder("deliveryContentAudit");
    buildGetterChain(inputNode, fieldName, getterChain);
    return getterChain.toString();
}

private static boolean buildGetterChain(JsonNode currentNode, String fieldName, StringBuilder getterChain) {
    if (currentNode.has(fieldName)) {
        // We found the target field, add the getter to the chain
        getterChain.append(".get").append(capitalize(fieldName)).append("()");
        return true;
    }

    // Traverse deeper into nested objects
    for (Iterator<Map.Entry<String, JsonNode>> it = currentNode.fields(); it.hasNext(); ) {
        Map.Entry<String, JsonNode> entry = it.next();
        JsonNode childNode = entry.getValue();

        if (childNode.isObject()) {
            getterChain.append(".get").append(capitalize(entry.getKey())).append("()");

            boolean found = buildGetterChain(childNode, fieldName, getterChain);

            if (found) {
                return true;
            } else {
                // If the field wasn't found in this path, backtrack by removing the added part of the chain
                getterChain.setLength(getterChain.length() - (".get".length() + capitalize(entry.getKey()).length() + "()".length()));
            }
        }
    }
    return false;
}

private static String capitalize(String input) {
    if (input == null || input.isEmpty()) return input;
    return input.substring(0, 1).toUpperCase() + input.substring(1);
}

public static String getIndexConstant(int index) {
        String[] constants = {"ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE", "TEN"};
        return constants[index - 1]; // Adjust for 0-based index
    }
}
